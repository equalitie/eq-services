---
# This should be first included since we put all the
# apt_repository in this file

- name: Add Icinga repository key
  become: yes
  apt_key:
    url: "{{ icinga_apt_key }}"
    state: present

- name: Add Icinga repository
  become: yes
  apt_repository:
    repo: "{{ icinga_apt_url }}"
    state: present

- name: Ensure icinga is installed
  become: yes
  apt:
    name: icinga2
    state: present
  notify:
    - start icinga2
    - restart icinga2

- name: install postgresql app and prerequisite
  become: yes
  apt:
    name:
      - postgresql
      - icinga2-ido-pgsql
      - python-psycopg2
    state: present

- name: install extra for modules apps
  become: yes
  apt:
    name:
      - git
      - graphite-carbon
      - graphite-api
    state: present

- name: some plugins installed
  become: yes
  apt:
    name:
      - monitoring-plugins
      - nagios-plugins-contrib
      - nagios-nrpe-plugin
      - libmonitoring-plugin-perl
      - libreadonly-perl
    state: present

- name: Create conf.d directory
  become: yes
  file:
    dest: "{{ icinga_conf_dir }}/{{ item }}"
    state: directory
    owner: "{{ icinga_user }}"
    group: "{{ icinga_group }}"
    mode: '0755'
  loop:
    - conf.d

- name: Manage main Icinga configuration
  become: yes
  template:
    src: icinga2.conf.j2
    dest: "{{ icinga_conf_dir }}/icinga2.conf"
    owner: "{{ icinga_user }}"
    group: "{{ icinga_group }}"
    mode: '0644'
  notify:
    - reload icinga2

- name: Check for constants orig file
  become: yes
  stat:
    path: "{{ icinga_conf_dir }}/constants.conf.orig"
  register: sample_file

- name: Copy original Icinga config to sample
  become: yes
  copy:
    remote_src: true
    src: "{{ icinga_conf_dir }}/constants.conf"
    dest: "{{ icinga_conf_dir }}/constants.conf.orig"
    owner: "{{ icinga_user }}"
    group: "{{ icinga_group }}"
    mode: '0644'
  when: not sample_file.stat.exists
  notify:
    - restart icinga2

- name: Manage Icinga constants
  become: yes
  template:
    src: constants.conf.j2
    dest: "{{ icinga_conf_dir }}/constants.conf"
    owner: "{{ icinga_user }}"
    group: "{{ icinga_group }}"
    mode: '0644'
  notify:
    - reload icinga2

- name: master CA
  shell: icinga2 pki new-ca
  args:
    creates: "/var/lib/icinga2/ca/ca.key"
  become: yes
  notify:
    - reload icinga2

- name: create certs directory
  file:
    path: /var/lib/icinga2/certs
    owner: "{{icinga_user}}"
    group: "{{icinga_group}}"
    mode: '0755'
    state: directory
  become: yes

- name: copy ca.crt to certs
  copy:
    src: /var/lib/icinga2/ca/ca.crt
    dest: /var/lib/icinga2/certs/ca.crt
    owner: "{{icinga_user}}"
    group: "{{icinga_group}}"
    mode: '0644'
    remote_src: yes
  become: yes
  notify:
    - reload icinga2

- name: create master host certs and sign
  shell: cd /var/lib/icinga2/certs && icinga2 pki new-cert --cn {{ansible_fqdn}} --csr {{ansible_fqdn}}.csr --key {{ansible_fqdn}}.key && icinga2 pki sign-csr --csr {{ansible_fqdn}}.csr --cert {{ansible_fqdn}}.crt
  args:
    creates: "/var/lib/icinga2/certs/{{ansible_fqdn}}.crt"
  become: yes
  notify:
    - reload icinga2

- name: install features-available templates
  template:
    src: "features-available/{{item}}.j2"
    dest: "{{ icinga_features_available_dir }}/{{item}}"
    owner: "{{icinga_user}}"
    group: "{{icinga_group}}"
    mode: '0640'
  become: yes
  loop:
    - api.conf
    - graphite.conf
    - ido-pgsql.conf
  notify:
    - reload icinga2

- name: install zones.conf
  template:
    src: zones.conf.j2
    dest: "{{ icinga_conf_dir }}/zones.conf"
    owner: root
    group: root
    mode: '0644'
  become: yes
  notify:
    - reload icinga2

- name: create some server zones.d/ directory
  file:
    path: "{{ icinga_conf_dir }}/zones.d/{{item}}"
    state: directory
    owner: "{{icinga_user}}"
    group: "{{icinga_group}}"
    mode: '0755'
  become: yes
  loop:
    - master
    - global-templates

- name: master zone files
  template:
    src: "zones.d/master/{{item}}.j2"
    dest: "{{ icinga_conf_dir }}/zones.d/master/{{item}}"
    owner: root
    group: root
    mode: '0644'
  become: yes
  loop:
    - hosts.conf
    - cluster.conf
  notify:
    - reload icinga2

- name: global-templates zone files
  template:
    src: "zones.d/global-templates/{{item}}.j2"
    dest: "{{ icinga_conf_dir }}/zones.d/global-templates/{{item}}"
    owner: root
    group: root
    mode: '0644'
  become: yes
  loop:
    - users.conf
    - groups.conf
    - templates.conf
    - services.conf
    - downtimes.conf
    - timeperiods.conf
    - notifications.conf
    - commands.conf
  notify:
    - reload icinga2

- name: install api-users.conf
  template:
    src: conf.d/api-users.conf.j2
    dest: "{{icinga_conf_dir}}/conf.d/api-users.conf"
    owner: root
    group: root
    mode: '0644'
  become: yes
  notify:
    - reload icinga2

- name: Create Icinga2 IDO Database User
  postgresql_user:
    name: icinga2
    password: "{{icinga2_db_user_password}}"
    encrypted: yes
    role_attr_flags: CREATEDB,NOSUPERUSER,LOGIN,NOCREATEROLE
  become: yes
  become_user: postgres

- name: Create Icings2 IDO Database
  postgresql_db:
    name: icinga2_db
    state: present
    encoding: UTF-8
    owner: icinga2
  register: icinga_ido_db
  become: yes
  become_user: postgres

- name: Import the IDO Schema
  postgresql_db:
    name: icinga2_db
    owner: icinga2
    state: restore
    target: /usr/share/icinga2-ido-pgsql/schema/pgsql.sql
    login_host: localhost
    login_user: icinga2
    login_password: "{{icinga2_db_user_password}}"
  become: yes
  become_user: postgres
  when: icinga_ido_db.changed == true

# NOTE: Make sure any templated file in icinga_features_available_dir is already deployed
# at this time if needed. Next 2 lines will be enabling/disabling them with a link to
# icinga_features_enabled_dir.
# The features enabled are defined in default/main.yml -> icinga_enabled_features list 

- name: collect all enabled features
  become: yes
  find:
    paths: "{{ icinga_features_enabled_dir }}/"
    patterns: '*.conf'
    file_type: any
  register: enabled_features

- name: set fact enabled_files
  set_fact:
    enabled_files: "{{ enabled_files|default([]) + [ item.path ] }}"
  loop: "{{ enabled_features.files }}"

- name: set fact managed_feature_files
  set_fact:
    managed_feature_files: "{{managed_feature_files|default([]) + [ icinga_features_enabled_dir + '/' + item + '.conf']}}"
  loop: "{{icinga_enabled_features}}"

- name: add managed features
  become: yes
  file:
    src: "{{ icinga_features_available_dir }}/{{ item }}.conf"
    dest: "{{icinga_features_enabled_dir}}/{{ item }}.conf"
    state: link
  loop: "{{ icinga_enabled_features }}"
  notify: reload icinga2

- name: removing unmanaged features
  become: yes
  file:
    path: "{{ item }}"
    state: absent
  loop: "{{ enabled_files|default([]) }}"
  notify: reload icinga2
  when:
    - item not in managed_feature_files

- name: Check for carbon.conf orig file
  become: yes
  stat:
    path: "/etc/carbon/carbon.conf.orig"
  register: carbon_orig_file

- name: Copy original carbon.conf to orig
  become: yes
  copy:
    remote_src: true
    src: /etc/carbon/carbon.conf
    dest: /etc/carbon/carbon.conf.orig
    owner: root
    group: root
    mode: '0644'
  when: not carbon_orig_file.stat.exists
  notify:
    - restart carbon-cache
    - restart graphite

- name: install carbon templates
  template:
    src: "carbon/{{item}}.j2"
    dest: "/etc/carbon/{{item}}"
    owner: root
    group: root
    mode: '0644'
  become: yes
  loop:
    - carbon.conf
    - storage-schemas.conf
    - storage-aggregation.conf
  notify:
    - restart carbon-cache
    - restart graphite
