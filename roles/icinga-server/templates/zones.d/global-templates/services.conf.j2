// {{ansible_managed}}

/*
 * Tip: Use `icinga2 object list --type Service` to
 * list all service objects after running
 * configuration validation (`icinga2 daemon -C`).
 */

/*
 * vars.ping_wrta = 100
 * vars.ping_crta = 200
 * are default found in
 * command-plugins.conf that is included global
 * we are changing them here because we have systems
 * all over the world and the defaults will always
 * hit warnings and critical.
 */

apply Service "ping4" {
  import "generic-service"
  check_command = "ping4"
  vars.ping_wrta = 165
  vars.ping_crta = 235
  assign where host.address
}

apply Service "ping6" {
  import "generic-service"
  check_command = "ping6"
  assign where host.address6
}

/* 
 * We do not need to check ssh on all Linux os servers. 
 * Most the time a firewall is set. Leave here for later
 * use.

apply Service "ssh" {
  import "generic-service"
  check_command = "ssh"
  assign where (host.address || host.address6) && host.vars.os == "Linux"
}

*/

apply Service for (http_vhost => config in host.vars.http_vhosts) {
  import "generic-service"
  check_command = "http"
  vars += config
}

apply Service for (disk => config in host.vars.disks) {
  import "generic-service"
  check_command = "disk"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.client_endpoint || host.zone == "master"
  vars += config
}

apply Service "icinga" {
  import "generic-service"
  check_command = "icinga"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.client_endpoint || host.zone == "master"
}

apply Service "load" {
  import "generic-service"
  check_command = "load"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.client_endpoint || host.zone == "master"

  /* TODO: This time need to be defined and become a variable */ 
  vars.backup_downtime = "02:00-03:00"
}

apply Service "procs" {
  import "generic-service"
  check_command = "procs"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.client_endpoint || host.zone == "master"
}

apply Service "swap" {
  import "generic-service"
  check_command = "swap"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.client_endpoint || host.zone == "master"
}

apply Service "users" {
  import "generic-service"
  check_command = "users"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.client_endpoint || host.zone == "master"
}

apply Service "apt" {
  import "generic-service"
  check_command = "apt"
  command_endpoint = host.vars.client_endpoint
  host.vars.notification_interval = 60m
  assign where host.vars.client_endpoint || host.zone == "master"
}

apply Service "swabber" {
  import "generic-service"
  check_command = "swabber"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.edge
}

apply Service "Deflect Log" {
  import "generic-service"
  check_command = "deflect-log"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.edge
}

apply Service "Check ATS Crash" {
  import "generic-service"
  check_command = "check-ats-crash"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.edge
}

apply Service "memory" {
  import "generic-service"
  check_command = "memory"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.client_endpoint || host.zone == "master"
}

apply Service "zombies" {
  import "generic-service"
  check_command = "zombies"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.client_endpoint || host.zone == "master"
}

apply Service "swabber is running" {
  import "generic-service"
  check_command = "swabber-running"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.edge
}

apply Service "tcptraffic" {
  import "generic-service"
  check_command = "tcptraffic"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.edge
}

apply Service "connections" {
  import "generic-service"
  check_command = "connections"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.edge
}

apply Service "Autodeflect Maintenance Lock" {
  import "generic-service"
  check_command = "deflect-maint-lock"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.dcontroller
}

apply Service "Autodeflect Running" {
  import "generic-service"
  check_command = "deflect-autodeflect-running"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.dcontroller
}

apply Service "Banjax Ban Rate" {
  import "generic-service"
  check_command = "deflect-banjax-ban-rate"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.dcontroller
}

apply Service "Deflect client.yml Timestamp" {
  import "generic-service"
  check_command = "deflect-clientsyml-timestamp"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.dcontroller
}
{% if dnets is defined %}
{% for d in dnets | flatten(levels=1) %}

apply Service "Edgemanage Integrity for {{d}}" {
  import "generic-service"
  check_command = "check-edgemanage-integrity"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.dcontroller
  vars.dnet = "{{d}}"
}

apply Service "Edgemanage Rotation for {{d}}" {
  import "generic-service"
  check_command = "check-edgemanage-rotation"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.dcontroller
  vars.dnet = "{{d}}"
}
{% endfor %}
{% endif %}

apply Service "Edgemanage Loop" {
  import "generic-service"
  check_command = "check-edgemanage-loop"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.dcontroller
}

apply Service "Check Edge Certs" {
  import "generic-service"
  check_command = "check-ssl-certs"
  check_interval = 10m
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.dcontroller
}

apply Service "Log Injection" {
  import "generic-service"
  check_command = "check-log-injection"
  command_endpoint = host.vars.client_endpoint
  assign where host.vars.dcontroller
}
# TODO: Disable this 'til we fix the script
#apply Service "Total Bans" {
#  import "generic-service"
#  check_command = "check-total-bans"
#  command_endpoint = host.vars.client_endpoint
#  assign where host.vars.dcontroller
#}
